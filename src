import sqlite3
import tkinter as tk
from tkinter import messagebox, ttk
from datetime import datetime, timedelta

def connect_db():
    return sqlite3.connect('biblioteca.db')

def create_tables():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Autores (
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        Nome TEXT NOT NULL,
        Nacionalidade TEXT NOT NULL
    )''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Livros (
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        Titulo TEXT NOT NULL,
        Autor TEXT,
        AnoPublicacao INTEGER,
        DataLancamento TEXT,
        Genero TEXT,
        Paginas INTEGER,
        Classificacao INTEGER
    )''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Emprestimos (
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        Livro TEXT,
        DataEmprestimo TEXT,
        DataDevolucao TEXT,
        NomeUsuario TEXT,
        Email TEXT,
        Idade INTEGER
    )''')
    conn.commit()
    conn.close()

create_tables()

def add_autor():
    nome = entry_nome_autor.get()
    nacionalidade = entry_nacionalidade_autor.get()
    if not nome or not nacionalidade:
        messagebox.showerror('Erro', 'Todos os campos devem ser preenchidos!')
        return
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('INSERT INTO Autores (Nome, Nacionalidade) VALUES (?, ?)', (nome, nacionalidade))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Autor adicionado com sucesso!')
    entry_nome_autor.delete(0, tk.END)
    entry_nacionalidade_autor.delete(0, tk.END)

def add_livro():
    titulo = entry_titulo_livro.get()
    autor = entry_autor.get()
    ano = entry_ano_livro.get()
    genero = entry_genero_livro.get()
    data_lancamento = entry_data_lancamento.get()
    paginas = entry_paginas.get()
    classificacao = entry_classificacao.get()
    
    if not titulo or not autor or not ano or not genero or not data_lancamento or not paginas or not classificacao:
        messagebox.showerror('Erro', 'Todos os campos devem ser preenchidos!')
        return
    if not ano.isdigit() or len(ano) != 4 or not paginas.isdigit() or not classificacao.isdigit():
        messagebox.showerror('Erro', 'Ano, páginas e classificação devem ser números válidos!')
        return
    try:
        datetime.strptime(data_lancamento, '%Y-%m-%d')
    except ValueError:
        messagebox.showerror('Erro', 'Data deve estar no formato AAAA-MM-DD!')
        return
    
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('INSERT INTO Livros (Titulo, Autor, AnoPublicacao, DataLancamento, Genero, Paginas, Classificacao) VALUES (?, ?, ?, ?, ?, ?, ?)', 
                   (titulo, autor, int(ano), data_lancamento, genero, int(paginas), int(classificacao)))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Livro adicionado com sucesso!')
    entry_titulo_livro.delete(0, tk.END)
    entry_autor.delete(0, tk.END)
    entry_ano_livro.delete(0, tk.END)
    entry_genero_livro.delete(0, tk.END)
    entry_data_lancamento.delete(0, tk.END)
    entry_paginas.delete(0, tk.END)
    entry_classificacao.delete(0, tk.END)

def add_emprestimo():
    livro = entry_livro.get()
    data_emp = entry_data_emp.get()
    usuario = entry_nome_usuario.get()
    email = entry_email_usuario.get()
    idade = entry_idade_usuario.get()
    
    if not livro or not data_emp or not usuario or not email or not idade:
        messagebox.showerror('Erro', 'Todos os campos devem ser preenchidos!')
        return
    
    if not idade.isdigit():
        messagebox.showerror('Erro', 'Idade deve ser um número válido!')
        return
    
    idade = int(idade)

    # Verifica se o livro tem classificação etária
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('SELECT Classificacao FROM Livros WHERE Titulo = ?', (livro,))
    resultado = cursor.fetchone()
    
    if resultado:
        classificacao = resultado[0]
        if classificacao > idade:
            messagebox.showerror('Erro', 'Você não tem idade suficiente para pegar este livro.')
            return
    else:
        messagebox.showerror('Erro', 'Livro não encontrado.')
        return

    try:
        data_emp = datetime.strptime(data_emp, '%Y-%m-%d')
    except ValueError:
        messagebox.showerror('Erro', 'Data deve estar no formato AAAA-MM-DD!')
        return
    
    data_dev = data_emp + timedelta(days=14)
    cursor.execute('INSERT INTO Emprestimos (Livro, DataEmprestimo, DataDevolucao, NomeUsuario, Email, Idade) VALUES (?, ?, ?, ?, ?, ?)', 
                   (livro, data_emp.strftime('%Y-%m-%d'), data_dev.strftime('%Y-%m-%d'), usuario, email, idade))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Empréstimo adicionado com sucesso!')
    entry_livro.delete(0, tk.END)
    entry_data_emp.delete(0, tk.END)
    entry_nome_usuario.delete(0, tk.END)
    entry_email_usuario.delete(0, tk.END)
    entry_idade_usuario.delete(0, tk.END)

def view_emprestimos():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
    SELECT ID, Livro, DataEmprestimo, DataDevolucao, NomeUsuario, Email, Idade 
    FROM Emprestimos''')
    emprestimos = cursor.fetchall()
    conn.close()
    emprestimos_list.delete(0, tk.END)
    for emp in emprestimos:
        emprestimos_list.insert(tk.END, f'ID: {emp[0]} | Livro: {emp[1]} | Data Empréstimo: {emp[2]} | Data Devolução: {emp[3]} | Usuário: {emp[4]} | Email: {emp[5]} | Idade: {emp[6]}')

def buscar_livros_por_titulo():
    termo = entry_busca_livros.get()
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('SELECT Titulo, Autor FROM Livros WHERE Titulo LIKE ?', ('%' + termo + '%',))
    resultados = cursor.fetchall()
    conn.close()
    
    resultados_list.delete(0, tk.END)
    if resultados:
        for livro in resultados:
            resultados_list.insert(tk.END, f'Título: {livro[0]} | Autor: {livro[1]}')
    else:
        resultados_list.insert(tk.END, 'Nenhum livro encontrado.')

def buscar_livros_por_paginas():
    paginas = entry_busca_paginas.get()
    if not paginas.isdigit():
        messagebox.showerror('Erro', 'Por favor, insira um número válido de páginas.')
        return
    
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('SELECT Titulo, Autor FROM Livros WHERE Paginas = ?', (int(paginas),))
    resultados = cursor.fetchall()
    conn.close()
    
    resultados_list_paginas.delete(0, tk.END)
    if resultados:
        for livro in resultados:
            resultados_list_paginas.insert(tk.END, f'Título: {livro[0]} | Autor: {livro[1]}')
    else:
        resultados_list_paginas.insert(tk.END, 'Nenhum livro encontrado com essa quantidade de páginas.')

# Configura a interface gráfica
root = tk.Tk()
root.title('Sistema de Biblioteca')
root.configure(bg='#2e2e2e')  # Fundo escuro

# Frame para adicionar autores
frame_autor = tk.LabelFrame(root, text='Adicionar Autor', bg='#3a3a3a', fg='white')
frame_autor.grid(row=0, column=0, padx=10, pady=10, sticky='nsew')

tk.Label(frame_autor, text='Nome:', bg='#3a3a3a', fg='white').grid(row=0, column=0)
entry_nome_autor = tk.Entry(frame_autor, bg='#444444', fg='white', insertbackground='white')
entry_nome_autor.grid(row=0, column=1)

tk.Label(frame_autor, text='Nacionalidade:', bg='#3a3a3a', fg='white').grid(row=1, column=0)
entry_nacionalidade_autor = tk.Entry(frame_autor, bg='#444444', fg='white', insertbackground='white')
entry_nacionalidade_autor.grid(row=1, column=1)

tk.Button(frame_autor, text='Adicionar Autor', command=add_autor, bg='#4caf50', fg='white').grid(row=2, columnspan=2, pady=5)

# Frame para adicionar livros
frame_livro = tk.LabelFrame(root, text='Adicionar Livro', bg='#3a3a3a', fg='white')
frame_livro.grid(row=0, column=1, padx=10, pady=10, sticky='nsew')

tk.Label(frame_livro, text='Título:', bg='#3a3a3a', fg='white').grid(row=0, column=0)
entry_titulo_livro = tk.Entry(frame_livro, bg='#444444', fg='white', insertbackground='white')
entry_titulo_livro.grid(row=0, column=1)

tk.Label(frame_livro, text='Autor:', bg='#3a3a3a', fg='white').grid(row=1, column=0)
entry_autor = tk.Entry(frame_livro, bg='#444444', fg='white', insertbackground='white')
entry_autor.grid(row=1, column=1)

tk.Label(frame_livro, text='Ano:', bg='#3a3a3a', fg='white').grid(row=2, column=0)
entry_ano_livro = tk.Entry(frame_livro, bg='#444444', fg='white', insertbackground='white')
entry_ano_livro.grid(row=2, column=1)

tk.Label(frame_livro, text='Gênero:', bg='#3a3a3a', fg='white').grid(row=3, column=0)
entry_genero_livro = tk.Entry(frame_livro, bg='#444444', fg='white', insertbackground='white')
entry_genero_livro.grid(row=3, column=1)

tk.Label(frame_livro, text='Data de Lançamento (AAAA-MM-DD):', bg='#3a3a3a', fg='white').grid(row=4, column=0)
entry_data_lancamento = tk.Entry(frame_livro, bg='#444444', fg='white', insertbackground='white')
entry_data_lancamento.grid(row=4, column=1)

tk.Label(frame_livro, text='Número de Páginas:', bg='#3a3a3a', fg='white').grid(row=5, column=0)
entry_paginas = tk.Entry(frame_livro, bg='#444444', fg='white', insertbackground='white')
entry_paginas.grid(row=5, column=1)

tk.Label(frame_livro, text='Classificação Etária:', bg='#3a3a3a', fg='white').grid(row=6, column=0)
entry_classificacao = tk.Entry(frame_livro, bg='#444444', fg='white', insertbackground='white')
entry_classificacao.grid(row=6, column=1)

tk.Button(frame_livro, text='Adicionar Livro', command=add_livro, bg='#4caf50', fg='white').grid(row=7, columnspan=2, pady=5)

# Frame para adicionar empréstimos
frame_emprestimo = tk.LabelFrame(root, text='Adicionar Empréstimo', bg='#3a3a3a', fg='white')
frame_emprestimo.grid(row=1, column=0, padx=10, pady=10, sticky='nsew')

tk.Label(frame_emprestimo, text='Livro:', bg='#3a3a3a', fg='white').grid(row=0, column=0)
entry_livro = tk.Entry(frame_emprestimo, bg='#444444', fg='white', insertbackground='white')
entry_livro.grid(row=0, column=1)

tk.Label(frame_emprestimo, text='Data do Empréstimo (AAAA-MM-DD):', bg='#3a3a3a', fg='white').grid(row=1, column=0)
entry_data_emp = tk.Entry(frame_emprestimo, bg='#444444', fg='white', insertbackground='white')
entry_data_emp.grid(row=1, column=1)

tk.Label(frame_emprestimo, text='Nome do Usuário:', bg='#3a3a3a', fg='white').grid(row=2, column=0)
entry_nome_usuario = tk.Entry(frame_emprestimo, bg='#444444', fg='white', insertbackground='white')
entry_nome_usuario.grid(row=2, column=1)

tk.Label(frame_emprestimo, text='Email:', bg='#3a3a3a', fg='white').grid(row=3, column=0)
entry_email_usuario = tk.Entry(frame_emprestimo, bg='#444444', fg='white', insertbackground='white')
entry_email_usuario.grid(row=3, column=1)

tk.Label(frame_emprestimo, text='Idade:', bg='#3a3a3a', fg='white').grid(row=4, column=0)
entry_idade_usuario = tk.Entry(frame_emprestimo, bg='#444444', fg='white', insertbackground='white')
entry_idade_usuario.grid(row=4, column=1)

tk.Button(frame_emprestimo, text='Adicionar Empréstimo', command=add_emprestimo, bg='#4caf50', fg='white').grid(row=5, columnspan=2, pady=5)

# Frame para visualizar empréstimos
frame_visualizar = tk.LabelFrame(root, text='Visualizar Empréstimos', bg='#3a3a3a', fg='white')
frame_visualizar.grid(row=1, column=1, padx=10, pady=10, sticky='nsew')

emprestimos_list = tk.Listbox(frame_visualizar, width=80, bg='#444444', fg='white')
emprestimos_list.grid(row=0, column=0)

tk.Button(frame_visualizar, text='Carregar Empréstimos', command=view_emprestimos, bg='#4caf50', fg='white').grid(row=1, columnspan=1, pady=5)

# Frame para buscar livros
frame_busca = tk.LabelFrame(root, text='Buscar Livro por Título', bg='#3a3a3a', fg='white')
frame_busca.grid(row=2, column=0, padx=10, pady=10, sticky='nsew')

tk.Label(frame_busca, text='Buscar Título:', bg='#3a3a3a', fg='white').grid(row=0, column=0)
entry_busca_livros = tk.Entry(frame_busca, bg='#444444', fg='white', insertbackground='white')
entry_busca_livros.grid(row=0, column=1)

tk.Button(frame_busca, text='Buscar', command=buscar_livros_por_titulo, bg='#4caf50', fg='white').grid(row=1, columnspan=2, pady=5)

resultados_list = tk.Listbox(frame_busca, width=80, bg='#444444', fg='white')
resultados_list.grid(row=2, column=0, columnspan=2)

# Frame para buscar livros por páginas
frame_busca_paginas = tk.LabelFrame(root, text='Buscar Livro por Páginas', bg='#3a3a3a', fg='white')
frame_busca_paginas.grid(row=2, column=1, padx=10, pady=10, sticky='nsew')

tk.Label(frame_busca_paginas, text='Número de Páginas:', bg='#3a3a3a', fg='white').grid(row=0, column=0)
entry_busca_paginas = tk.Entry(frame_busca_paginas, bg='#444444', fg='white', insertbackground='white')
entry_busca_paginas.grid(row=0, column=1)

tk.Button(frame_busca_paginas, text='Buscar', command=buscar_livros_por_paginas, bg='#4caf50', fg='white').grid(row=1, columnspan=2, pady=5)

resultados_list_paginas = tk.Listbox(frame_busca_paginas, width=80, bg='#444444', fg='white')
resultados_list_paginas.grid(row=2, column=0, columnspan=2)

# Configura o tamanho do grid
for i in range(3):
    root.grid_rowconfigure(i, weight=1)
for i in range(2):
    root.grid_columnconfigure(i, weight=1)

root.mainloop()
